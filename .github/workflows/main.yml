name: Run UI Test
run-name: Run UI Test

# 觸發此 action 的時機
on:
  push:
    branches: '*' # 只要有任何一個 commit 被 push，就會觸發此 action
  pull_request:
    branches: '*'
  # schedule:
  #   - cron: "55 16 * * *"
  workflow_dispatch:  # 可以手動執行此 action

# 預先定義此 action 要幹嘛
jobs:
  Run_Twitch_UI_Test:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 讓 actions 有寫入權限
    steps:
      - name: Checkout
        uses: actions/checkout@v3   #actions/checkout@v3 代表 checkout Action 的 主要版本 v3
        with:
          persist-credentials: false  # 停用內建的 GITHUB_TOKEN
      - name: Setup Python
        uses: actions/setup-python@v4.5.0  #v4（2023年發布）：支援 cache、更好的 Python 安裝流程
        with:
          python-version: "3.12"
      - name: Show workspace path
        run: echo "Workspace is at $GITHUB_WORKSPACE"
      - name: Install Python Dependency
        run: pip3 install -r requirements.txt
      - name: Export Path
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
      - name: Check Current Chrome Version
        id: check_chrome
        run: |
          if command -v google-chrome &> /dev/null; then
            CURRENT_VERSION=$(google-chrome --version | awk '{print $3}')
            LATEST_VERSION=$(curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE)
            echo "Current Chrome Version: $CURRENT_VERSION"
            echo "Latest Chrome Version: $LATEST_VERSION"
            if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
              echo "Chrome is up-to-date. Skipping installation."
              echo "SKIP_CHROME_INSTALL=true" >> $GITHUB_ENV
            else
              echo "Chrome needs an update."
              echo "SKIP_CHROME_INSTALL=false" >> $GITHUB_ENV
            fi
          else
            echo "Chrome is not installed. Installing..."
            echo "SKIP_CHROME_INSTALL=false" >> $GITHUB_ENV
          fi
      - name: Install Chrome and ChromeDriver (if needed)
        if: env.SKIP_CHROME_INSTALL == 'false'
        run: |
          sudo apt update
          sudo apt install -y wget unzip
          wget -q -O /tmp/google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i /tmp/google-chrome.deb || sudo apt-get -f install -y
          wget -q -O /tmp/chromedriver.zip https://storage.googleapis.com/chrome-for-testing-public/$(google-chrome --version | awk '{print $3}')/linux64/chromedriver-linux64.zip
          unzip /tmp/chromedriver.zip -d /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver-linux64
          sudo mv /usr/local/bin/chromedriver-linux64 /usr/
      - name: Run Twitch_Proj/Testcases/test_twitch.py
        run: |
          python3 --version
          pytest --html=Twitch_Proj/report.html  Twitch_Proj/Testcases/test_twitch.py
        continue-on-error: true
      - name: Commit Data Back To GitHub Repo  # 將測試結果回傳到Github
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]" #設定 Git 使用者名稱 為 "github-actions[bot]"（這是 GitHub Actions 的官方機器人帳號）。
          git config --global user.email "github-actions[bot]@users.noreply.github.com" #一個匿名 GitHub Email，避免洩露個人資訊。
          git add ./Twitch_Proj/report.html
          git add ./Twitch_Proj/*.log 
          git commit -m "daily report and log ,Automated commit from GitHub Actions"  || exit 0 # 防止沒有變更時出錯
          git push https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git
      
      
